# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, H.Togo
# This file is distributed under the same license as the HΦtest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HΦtest 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-16 13:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../algorithm/Bogoliubov_en.rst:6
msgid "Bogoliubov representation"
msgstr ""

#: ../../algorithm/Bogoliubov_en.rst:9
msgid ""
"In the spin system, the spin indices in the input files of ``transfer``, "
"``InterAll``, and correlation functions are specified as those of the "
"Bogoliubov representation. The spin operators are written by using "
"creation\\/annihilation operators:"
msgstr ""

#: ../../algorithm/Full Diagonalization_en.rst:4
msgid "Full Diagonalization method"
msgstr ""

#: ../../algorithm/Full Diagonalization_en.rst:7
msgid "Overview"
msgstr ""

#: ../../algorithm/Full Diagonalization_en.rst:9
msgid ""
"We generate the matrix of :math:`\\hat{\\mathcal H }` by using the real "
"space configuration :math:`| \\psi_j \\rangle`\\(:math:`j=1\\cdots "
"d_{\\rm H}`, where :math:`d_{\\rm H}` is the dimension of the Hilbert "
"space): :math:`{\\mathcal H }_{ij}= \\langle \\psi_i | \\hat {\\mathcal H"
" } | \\psi_j \\rangle`. By diagonalizing this matrix, we can obtain all "
"the eigenvalues :math:`E_{i}` and eigenvectors :math:`|\\Phi_i\\rangle` "
"(:math:`i=1 \\cdots d_{\\rm H}`). In the diagonalization, we use a LAPACK"
" routine, such as ``dsyev`` or ``zheev``. We also calculate and output "
"the expectation values :math:`\\langle A_i\\rangle \\equiv \\langle "
"\\Phi_i | {\\hat A} | \\Phi_i\\rangle`. These values are used for the "
"finite-temperature calculations."
msgstr ""

#: ../../algorithm/Full Diagonalization_en.rst:20
msgid "Finite-temperature calculations"
msgstr ""

#: ../../algorithm/Full Diagonalization_en.rst:22
msgid ""
"From :math:`\\langle A_i\\rangle \\equiv \\langle \\Phi_i | {\\hat A} | "
"\\Phi_i\\rangle`, we calculate the finite-temperature properties by using"
" the relation"
msgstr ""

#: ../../algorithm/Full Diagonalization_en.rst:30
msgid "The calculation should be performed by using the own postscripts."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:4
msgid "Lanczos method"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:7
msgid "Details of Lanczos method"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:9
msgid ""
"Some parts of this section are based on the manual of TITPACK [12]_ and "
"the textbook published by M. Sugihara and K. Murota [13]_ (these "
"references are written in Japanese)."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:11
msgid ""
"In the Lanczos method, by successively operating the Hamiltonian to the "
"initial vector, we obtain the accurate eigenvalues around the maximum and"
" minimum eigenvalues and associated eigenvectors. Because we can perform "
"the Lanczos method by using only two vectors, the dimensions of which are"
" the dimensions of the total Hilbert space [#a]_ , the Lanczos method is "
"frequently used for the diagonalization of the large matrices. As "
"explained in detail below, one additional vector is necessary for "
"obtaining the eigenvector."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:21
msgid ""
"The principle of the Lanczos method is based on the power method. In the "
"power method, by successively operating the Hamiltonian "
":math:`\\hat{\\mathcal H }` to the arbitrary vector "
":math:`\\boldsymbol{x}_{0}`, we generate :math:`\\hat{\\mathcal H "
"}^{n}\\boldsymbol{x}_{0}`. The obtained space "
":math:`\\mathcal{K}_{n+1}(\\hat{\\mathcal H "
"},\\boldsymbol{x}_{0})=\\{\\boldsymbol{x}_{0},\\hat{\\mathcal H "
"}^{1}\\boldsymbol{x}_{0},\\dots,\\hat{\\mathcal H "
"}^{n}\\boldsymbol{x}_{0}\\}` is called the Krylov subspace. The initial "
"vector is represented by the superposition of the eigenvectors "
":math:`\\boldsymbol{e}_{i}` (the corresponding eigenvalues are "
":math:`E_{i}`) of :math:`\\hat{\\mathcal H }` as"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:37
msgid ""
"Here, :math:`E_{0}` denotes the maximum absolute values of the "
"eigenvalues. We note that all the eigenvalues are real numbers because "
"the Hamiltonian is Hermitian. By operating :math:`\\hat{\\mathcal H "
"}^{n}` to the initial vector, we obtain the relation as"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:46
msgid ""
"This relation indicates that the eigenvector of :math:`E_{0}` becomes "
"dominant for sufficiently large :math:`n`. In the Lanczos method, we "
"obtain the eigenvalues and eigenvectors by performing the appropriate "
"transformation for the obtained Krylov subspace."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:52
msgid ""
"In the Lanczos method, we successively generate the normalized orthogonal"
" basis :math:`\\boldsymbol{v}_{0},\\dots,\\boldsymbol{v}_{n-1}` from the "
"Krylov subspace :math:`\\mathcal{K}_{n}(\\hat{\\mathcal H "
"},\\boldsymbol{x}_{0})`. We define an initial vector and associated "
"components as :math:`\\boldsymbol{v}_{0} "
"=\\boldsymbol{x}_{0}/|\\boldsymbol{x}_{0}|`, "
":math:`\\beta_{0}=0,\\boldsymbol{x}_{-1}=0`. From this initial condition,"
" we can obtain the normalized orthogonal basis:"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:68
msgid ""
"From these definitions, it it obvious that :math:`\\alpha_{k}`, "
":math:`\\beta_{k}` are real numbers."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:70
msgid ""
"In the subspace spanned by these normalized orthogonal basis, the "
"Hamiltonian is transformed as"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:77
msgid ""
"Here, :math:`V_{n}` is a matrix whose column vectors are "
":math:`\\boldsymbol{v}_{i}(i=0,1,\\dots,n-1)`. :math:`T_{n}` is a "
"tridiagonal matrix and its diagonal elements are :math:`\\alpha_{i}` and "
"subdiagonal elements are :math:`\\beta_{i}`. It is known that the "
"eigenvalues of :math:`\\hat{\\mathcal H }` are well approximated by the "
"eigenvalues of :math:`T_{n}` for sufficiently large :math:`n`. (We note "
"that :math:`V^{\\dagger}V=I`, :math:`I` is an identity matrix). The "
"original eigenvectors of :math:`\\hat{\\mathcal H }` are obtained by "
":math:`\\boldsymbol{e}_{i}=V\\tilde{\\boldsymbol{e}}_{i}`, where  "
":math:`\\tilde{\\boldsymbol{e}}_{i}` denotes the eigenvectors of "
":math:`T_{n}`. From :math:`V`, we can obtain the eigenvectors of "
":math:`\\hat{\\mathcal H }` by performing the Lanczos method. However, in"
" the actual calculations, it is difficult to keep :math:`V`, because its "
"dimension is large [dimension of :math:`V` = (dimension of the total "
"Hilbert space) :math:`\\times` (the number of Lanczos iterations)]. Thus,"
" to obtain the eigenvectors, we again perform the same Lanczos "
"calculations after we obtain the eigenvalues from the Lanczos methods. In"
" the first Lanczos calculation, we keep "
":math:`\\tilde{\\boldsymbol{e}_{i}}`, because its dimension is small "
"[#b]_ . From this procedure, we obtain the eigenvectors  from :math:`V`."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:103
msgid ""
"In the Lanczos method, within a few hundred or thousand Lanczos "
"iterations, we obtain accurate eigenvalues near the maximum and minimum "
"eigenvalues. The necessary number of iterations is sufficiently small as "
"compared to the dimensions of the total Hilbert space."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:110
msgid ""
"We note that it is shown that the errors of the maximum and minimum "
"eigenvalues become exponentially small as a function of Lanczos "
"iterations (for details, see Ref. [13]_ )."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:116
msgid "Inverse iteration method"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:118
msgid ""
"From the approximate value of the eigenvalues :math:`(E_{n})`, by "
"successively operating :math:`(\\hat{\\mathcal H }-E_{n})^{-1}` to the "
"initial vector :math:`\\boldsymbol{y}_{0}`, we can obtain the accurate "
"eigenvector for :math:`E_{n}`."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:123
msgid ""
"From :math:`(\\hat{\\mathcal H }-E_{n})^{-1}\\boldsymbol{y}_{0}`, we "
"obtain linear simultaneous equations such as"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:130
msgid ""
"By solving this equation using the conjugate gradient method (CG method),"
" we obtain the eigenvector. From the obtained eigenvector, we can "
"calculate the eigenvalues and correlation functions. We note that four "
"additional vectors are necessary to perform the CG method. For a large "
"system size, it may be impossible to allocate memory to the additional "
"vectors."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:142 ../../algorithm/TPQ_en.rst:44
msgid "Details of implementation"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:145 ../../algorithm/TPQ_en.rst:47
msgid "**Initial vector**"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:147
msgid ""
"For the Lanczos method, an initial vector is specified with "
"``initial_iv``:math:`(\\equiv r_s)` defined in an input file for Standard"
" mode or a ModPara file for Expert mode. The type of initial vector can "
"be selected as a real number or complex number by using "
"``InitialVecType`` in a ModPara file."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:150
msgid ""
"For canonical ensemble and ``initial_iv``:math:`\\geq 0` A component of a"
" target of the Hilbert space is given by"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:157
msgid ""
"where :math:`N_{\\rm dim}` is the total number of the Hilbert spaces and "
":math:`N_{\\rm dim}/2` is added to avoid selecting a special Hilbert "
"space for a default value ``initial_iv`` :math:`=1`. When the type of "
"initial vector is selected as a real number, the coefficient value is "
"given by :math:`1`, while when it is selected as a complex number, the "
"value is given by :math:`(1+i)/\\sqrt{2}`."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:160
msgid ""
"For a grand canonical ensemble or ``initial_iv`` :math:`<0` The initial "
"vector is given by using a random generator, i.e., the coefficients of "
"all the components for the initial vector are given by random numbers. "
"The seed is calculated as"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:167
msgid ""
"where :math:`r_s` is the number given by an input file and :math:`n_{\\rm"
" run}` is the number of runs. The maximum value of :math:`n_{\\rm run}` "
"is defined by ``NumAve`` in an input file for Standard mode or a ModPara "
"file for Expert mode. Random numbers are generated by using SIMD-oriented"
" Fast Mersenne Twister (dSFMT) [14]_ ."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:170
msgid "**Convergence condition**"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:172
msgid ""
"In :math:`{\\mathcal H}\\Phi`, we use ``dsyev`` (routine of LAPACK) for "
"diagonalization of :math:`T_{n}`. We use the energy of the first excited "
"state of :math:`T_{n}` as the criterion of convergence. In the standard "
"setting, after five Lanczos steps, we diagonalize :math:`T_{n}` every two"
" Lanczos steps. If the energy of the first excited states coincides with "
"the previous energy within the specified accuracy, the Lanczos iteration "
"finishes. The accuracy of the convergence can be specified by "
"``CDataFileHead``\\(ModPara file in the expert mode)."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:186
msgid ""
"After obtaining the eigenvalues, we again perform the Lanczos iteration "
"to obtain the eigenvector. From the eigenvectors :math:`|n\\rangle`, we "
"calculate energy :math:`E_{n}=\\langle n|\\hat{\\mathcal H }|n\\rangle` "
"and variance :math:`\\Delta=\\langle n|\\hat{\\mathcal H }^{2}|n\\rangle "
"-(\\langle n|\\hat{\\mathcal H }|n\\rangle)^2`. If :math:`E_{n}` "
"coincides with the eigenvalues obtained by the Lanczos iteration and "
":math:`\\Delta` is smaller than the specified value, we finish "
"diagonalization."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:197
msgid ""
"If the accuracy of the Lanczos method is not sufficient, we perform the "
"CG method to obtain the eigenvector. As an initial vector of the CG "
"method, we use the eigenvectors obtained by the Lanczos method in the "
"standard setting. This frequently accelerates the convergence."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:203
msgid ""
"In :math:`{\\mathcal H}\\Phi`, to reduce the numerical cost, we use some "
"additional vectors; a vector for accumulating the real-space diagonal "
"elements of the Hamiltonian and a vector for specifying the given "
":math:`S_{z}` space and given particle space. The dimension of these "
"vectors is that of the Hilbert space."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:204
msgid ""
"Upper bound of the dimensions of :math:`\\tilde{\\boldsymbol{e}_{i}}` is "
"\\# of Lanczos iterations."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:205
msgid "http://www.stat.phys.titech.ac.jp/~nishimori/titpack2_new/index-e.html"
msgstr ""

#: ../../algorithm/Lanczos_en.rst:206
msgid ""
"Sugihara, K. Murota, Theoretical Numerical Linear Algebra, Iwanami Stud-"
"ies in Advanced Mathematics, Iwanami Shoten, Publishers, 2009."
msgstr ""

#: ../../algorithm/Lanczos_en.rst:207
msgid "http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/index.html"
msgstr ""

#: ../../algorithm/Realtime_en.rst:4
msgid "Real time evolution method"
msgstr ""

#: ../../algorithm/Realtime_en.rst:6
msgid ""
"In :math:`{\\mathcal H}\\Phi`, real time evolution calculation is done by"
" using the following relation"
msgstr ""

#: ../../algorithm/Realtime_en.rst:12
msgid ""
"where :math:`|\\Phi(t_0)\\rangle` is an initial wave function and "
":math:`t_n = \\sum_{j=1}^n  \\Delta t_j`. In calculation, we approximate "
":math:`\\exp^{-i {\\cal H}  \\Delta t_n}` as"
msgstr ""

#: ../../algorithm/Realtime_en.rst:19
msgid ""
"Here, the cut-off integer :math:`m` can be set by `ExpandCoef` in "
"`ModPara`. We can judge whether the expansion order is enough or not by "
"checking the norm conservation :math:`\\langle \\Phi (t_n)|\\Phi "
"(t_n)\\rangle=1` and energy conservation :math:`\\langle \\Phi "
"(t_n)|\\hat{\\cal H}|\\Phi (t_n)\\rangle=E`."
msgstr ""

#: ../../algorithm/TPQ_en.rst:4
msgid "Finite-temperature calculations by the TPQ method"
msgstr ""

#: ../../algorithm/TPQ_en.rst:6
msgid ""
"Sugiura and Shimizu showed that it is possible to calculate the finite-"
"temperature properties from a few wavefunctions (in the thermodynamic "
"limit, only one wave function is necessary) [5]_ . The wavefunction is "
"called the thermal pure quantum (TPQ) state. Because the TPQ state can be"
" generated by operating the Hamiltonian to the random initial "
"wavefunction, we directly use the routine Lanczos method for the TPQ "
"calculations. Here, we explain how to construct the micro canonical TPQ "
"(mTPQ) state, which offers the simplest method for calculating finite-"
"temperature properties."
msgstr ""

#: ../../algorithm/TPQ_en.rst:16
msgid ""
"Let :math:`|\\psi_{0}\\rangle` be a random initial vector. By operating "
":math:`(l-\\hat{\\mathcal H }/N_{s})^{k}`\\(:math:`l` is constant and "
":math:`N_{s}` represents the number of sites) to "
":math:`|\\psi_{0}\\rangle`, we obtain the :math:`k`\\th TPQ states as"
msgstr ""

#: ../../algorithm/TPQ_en.rst:25
msgid ""
"From :math:`|\\psi_{k}\\rangle`, we estimate the corresponding inverse "
"temperature :math:`\\beta_{k}` as"
msgstr ""

#: ../../algorithm/TPQ_en.rst:31
msgid ""
"where :math:`u_{k}` is the internal energy. The arbitrary local physical "
"properties at :math:`\\beta_{k}` are also estimated as"
msgstr ""

#: ../../algorithm/TPQ_en.rst:38
msgid ""
"In a finite-size system, error is caused by the choice of the initial "
"random vector. To estimate the average value and error of the physical "
"properties, we perform some independent calculations by changing "
":math:`|\\psi_{0}\\rangle`."
msgstr ""

#: ../../algorithm/TPQ_en.rst:49
msgid ""
"For the TPQ method, the initial vector is given by using a random "
"generator, i.e., the coefficients of all the components for the initial "
"vector are given by random numbers. The seed is calculated as"
msgstr ""

#: ../../algorithm/TPQ_en.rst:55
msgid ""
"where :math:`r_s` is the number given by an input file and :math:`n_{\\rm"
" run}` is the number of runs. :math:`r_s` and the maximum value of "
":math:`n_{\\rm run}` are defined by ``initial_iv`` and ``NumAve`` in an "
"input file for Standard mode or a ModPara file for Expert mode, "
"respectively. Random numbers are generated by using SIMD-oriented Fast "
"Mersenne Twister (dSFMT) [14]_ . We can select the type of initial vector"
" as a real number or complex number by using ``InitialVecType`` in a "
"ModPara file. :math:`k_{\\rm Thread}, N_{\\rm Thread}, and k_{\\rm "
"Process}` indicate the thread ID, number of threads, process ID, "
"respectively; the initial vector depends both on ``initial_iv`` and the "
"number of parallelisms."
msgstr ""

#: ../../algorithm/TPQ_en.rst:60
msgid "\\S. Sugiura, A. Shimizu, Phys. Rev. Lett. **108**, 240401 (2012)."
msgstr ""

#: ../../algorithm/TPQ_en.rst:61
msgid "http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/SFMT."
msgstr ""

#: ../../algorithm/al-index.rst:4
msgid "Algorithm"
msgstr ""

